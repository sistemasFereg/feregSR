"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const react_native_1 = require("react-native");
const react_native_bounceable_1 = tslib_1.__importDefault(require("@freakycoder/react-native-bounceable"));
/**
 * ? Local Imports
 */
const RNCheckboxCard_style_1 = tslib_1.__importStar(require("./RNCheckboxCard.style"));
const theme_1 = require("./theme");
const { width: ScreenWidth } = react_native_1.Dimensions.get("window");
const defaultCheckIcon = require("./local-assets/check-icon-dark.png");
const defaultSortIcon = require("./local-assets/sort-icon.png");
class RNCheckboxCard extends React.Component {
    constructor(props) {
        super(props);
        this.handleOnPress = () => {
            this.setState({ checked: !this.state.checked }, () => {
                // ? Outside onPress Callback
                this.props.onPress && this.props.onPress(this.state.checked);
            });
        };
        /* -------------------------------------------------------------------------- */
        /*                               Render Methods                               */
        /* -------------------------------------------------------------------------- */
        this.renderCheckIcon = () => {
            const { checkIconComponent, ImageComponent = react_native_1.Image, checkImageSource = defaultCheckIcon, } = this.props;
            return (checkIconComponent || (<ImageComponent resizeMode="contain" source={checkImageSource} style={RNCheckboxCard_style_1.default.checkIconImageStyle}/>));
        };
        this.renderCircleCheck = () => {
            const { theme, checked } = this.state;
            const { circleSize = 25, circleBorderRadius = 25, circleBackgroundColor = "#f9d749", circleBorderColor = theme_1.ThemeColors[theme].borderColor, } = this.props;
            return (<react_native_1.View style={RNCheckboxCard_style_1._circleCheckContainer(checked, circleSize, circleBorderRadius, circleBackgroundColor, circleBorderColor)}>
        {checked && this.renderCheckIcon()}
      </react_native_1.View>);
        };
        this.renderTextContainer = () => {
            const { checked, theme } = this.state;
            const { text, quantity, textStyle, quantityTextStyle, checkedTextColor = theme_1.ThemeColors[theme].checkedTextColor, uncheckedTextColor = theme_1.ThemeColors[theme].uncheckedTextColor, enableQuantityText = false, } = this.props;
            return (<react_native_1.View style={RNCheckboxCard_style_1.default.textContainer}>
        <react_native_1.Text numberOfLines={2} style={[
                RNCheckboxCard_style_1._textStyle(checked, checkedTextColor, uncheckedTextColor),
                textStyle,
            ]}>
          {text}
        </react_native_1.Text>
        {enableQuantityText && (<react_native_1.Text style={[RNCheckboxCard_style_1.default.quantityTextStyle, quantityTextStyle]}>
            {quantity}
          </react_native_1.Text>)}
      </react_native_1.View>);
        };
        this.renderSortButton = () => {
            const { rightIconComponent, sortIconImageSource = defaultSortIcon, ImageComponent = react_native_1.Image, } = this.props;
            return (<react_native_1.View style={RNCheckboxCard_style_1.default.rightIconContainer}>
        {rightIconComponent || (<ImageComponent resizeMode="contain" source={sortIconImageSource} style={RNCheckboxCard_style_1.default.sortIconImageStyle}/>)}
      </react_native_1.View>);
        };
        this.state = {
            theme: props.darkMode ? theme_1.DARK : theme_1.LIGHT,
            checked: props.isChecked || false,
        };
    }
    render() {
        const { theme } = this.state;
        const { height = 60, borderRadius = 10, width = ScreenWidth * 0.9, backgroundColor = theme_1.ThemeColors[theme].backgroundColor, } = this.props;
        return (<react_native_bounceable_1.default bounceEffect={0.97} bounceFriction={3} {...this.props} style={RNCheckboxCard_style_1.default.container} onPress={this.handleOnPress}>
        <react_native_1.View style={RNCheckboxCard_style_1._cardStyle(height, width, borderRadius, backgroundColor)}>
          {this.renderCircleCheck()}
          {this.renderTextContainer()}
          {this.renderSortButton()}
        </react_native_1.View>
      </react_native_bounceable_1.default>);
    }
}
exports.default = RNCheckboxCard;
//# sourceMappingURL=RNCheckboxCard.js.map